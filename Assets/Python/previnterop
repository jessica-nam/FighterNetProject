// This sets up Python environment by initializing the Python Engine
// Brige between Unity and Python
// Contains method: RunPythonCode (executes Python scipts)

using UnityEngine;
using Python.Runtime;
using System;
using System.Diagnostics.Tracing;

public static class PythonInterop
{
    private static PyModule storedScope;

    public static void Initialize()
    {
        // Make sure this path points to your python38.dll
        string pythonDll = @"C:\Python38\python38.dll";
        Environment.SetEnvironmentVariable("PYTHONNET_PYDLL", pythonDll, EnvironmentVariableTarget.Process);
        PythonEngine.Initialize();
        Debug.Log("Python Engine Initialized");
    }

    public static string InstallPackage(string packageName)
    {
        // Running the 'pip install' command
        string installCode = $@"
import subprocess
subprocess.call(['pip', 'install', '{packageName}'])
";
        return RunPythonCode(installCode);
    }

    public static string RunPythonCode(string pycode)
    {
        Initialize();
        using (Py.GIL()) // GIL ensures we can use Python objects
        {
            try
            {
                using (var scope = Py.CreateScope()) // Create a new scope
                {

                    PyObject version = Py.Import("sys").GetAttr("version");
                    Debug.Log("Python Version: " + version.As<string>());

                    string setupCode = @"import sys
from io import StringIO
sys.stdout = mystdout = StringIO()
is_successful = True";

                    setupCode = setupCode.TrimStart('\r', '\n');
                    scope.Exec(setupCode);
                    pycode = pycode.TrimStart('\r', '\n');
                    scope.Exec(pycode);
                    PyObject output = scope.Get("mystdout").InvokeMethod("getvalue");
                    return output.As<string>();
                }
            }
            catch (Exception ex)
            {
                Debug.LogError("Python Execution Error: " + ex.Message);
                return null;
            }
        }
    }


    // public static void RunPythonCode(string pycode)
    // {
    //     Initialize();
    //     using (Py.GIL())
    //     {
    //         try
    //         {
    //             storedScope = Py.CreateScope();
    //             storedScope.Exec(pycode);
    //         }
    //         catch (Exception ex)
    //         {
    //             Debug.LogError("Python Execution Error: " + ex.Message);
    //         }
    //     }
    // }


    // C# variable accessed and printed by Pythom
    public static int GetPlayerHealth(GameObject playerObject)
    {
        PlayerDamage playerDamage = playerObject.GetComponent<PlayerDamage>();
        if (playerDamage != null)
        {
            return playerDamage.GetHealth();
        }
        else
        {
            Debug.LogError("PlayerDamage component not found on the object.");
            return -1; 
        }
    }

    // Python variable created in Python accessed and printed by C#
    public static object GetPythonVariable(string varName)
    {
        using (Py.GIL())
        {
            if (storedScope.TryGet(varName, out PyObject pyObject))
            {
                return pyObject.AsManagedObject(typeof(object));
            }
            else
            {
                Debug.LogError($"Variable '{varName}' not found in Python scope.");
                return null;
            }
        }
    }


    



}
